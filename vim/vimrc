set nocompatible
filetype off

" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/vundle'

" My bundles
Plugin 'Shougo/neocomplcache.vim'
let g:neocomplcache_enable_at_startup = 1
Plugin 'Raimondi/delimitMate'
Plugin 'Yggdroot/indentLine'
Plugin 'terryma/vim-expand-region'
Plugin 'tpope/vim-fugitive'
Plugin 'kien/ctrlp.vim'
Plugin 'reinh/vim-makegreen'
Plugin 'airblade/vim-gitgutter'
Plugin 'hynek/vim-python-pep8-indent'
Plugin '2072/PHP-Indenting-for-VIm'
Plugin 'jnwhiteh/vim-golang'
Plugin 'tell-k/vim-autopep8'
"let g:autopep8_disable_show_diff=1
noremap <buffer> <F8> :call Autopep8()<CR><C-L>

call vundle#end()

set mouse=nv
let mapleader = ","

set noswapfile

"make searches case insensitive
set ignorecase
"except when I type a capital letter in the search
set smartcase

"encoding and file formats
set encoding=utf8
try
    lang en_US
catch
endtry

set background=dark
try
    colorscheme vividchalk
catch /^Vim\%((\a\+)\)\=:E185/
    :silent
endtry

syntax on

set title
let &titleold=hostname()
set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:p:h\")})%)%(\ %a%)\ -\ %{hostname()}

set statusline=%F%m%r%h%w\ [TYPE=%Y(%{&ff})]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [XY=%04l,%04v][%p%%]
set laststatus=2

" Source the vimrc file after saving it
if has("autocmd")
    autocmd bufwritepost .vimrc source $MYVIMRC
endif

if has("autocmd")
    filetype indent plugin on
endif

set expandtab
set smarttab

set tabstop=4
set shiftwidth=4
set softtabstop=4

set modeline

set scrolloff=5 " keep at least 5 lines above/below

" Highlight line under cursor
" set cursorline
" hi CursorLine term=none cterm=none

" Create Blank Newlines and stay in Normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>

" delete the current line and then insert a new one, with proper indent
nnoremap I ddko

" Begining & End of line in Normal mode
noremap H ^
noremap L g_

" Fix Ctrl-U and Ctrl-W
" http://vim.wikia.com/wiki/Recover_from_accidental_Ctrl-U
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

" move blocks of text up/down
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" easier moving of code blocks
vnoremap < <gv " better indentation
vnoremap > >gv " better indentation

" Use the system copy buffer!
vnoremap <C-c> "+y
vnoremap <C-x> "+x
noremap <C-v> "+P
noremap! <C-v> <Esc>"+P

" Line Numbers, Yay!
set number

nnoremap <leader>l :set list!<CR>
set list
set listchars=tab:Â»Â·,trail:Â·
    
	
set showbreak=â†ª

highlight SpecialKey ctermfg=Red guifg=Red
"highlight NonText cterm=reverse

nnoremap <leader>v :tabedit $MYVIMRC<CR>
noremap h :tabprevious<CR>
noremap l :tabnext<CR>
nnoremap <leader>o <Esc>:tabnew<CR>:e .<CR>
nnoremap <Leader>s <Esc>:wa<CR>

" Function keys
noremap <F1> <Esc>:w<CR>
noremap! <F1> <Esc>:w<CR>
nnoremap <F2> <Esc>:set nonumber!<CR>:set invpaste<CR>:set list!<CR>
inoremap <F2> <Esc>:set nonumber!<CR>:set invpaste<CR>:set list!<CR>
noremap <Leader><F2> :set foldenable!<CR>
noremap <F3> <Esc>gg=G''<Esc>:w<CR>
noremap! <F3> <Esc>gg=G''<Esc>:w<CR>
" map <Leader><F3> :call <SID>StripTrailingWhitespaces()<CR>
" F8 == <C-[>OW

" Execute file being edited with F5:
noremap <buffer> <F5> <Esc>:w<CR>:!./% <CR>
noremap <buffer> <C-[>OT <Esc>:w<CR>:!./% <CR>

let g:html_indent_inctags = "body,head,li,tbody"

highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

nnoremap <silent> n   n:call HLNext(0.3)<cr>
nnoremap <silent> N   N:call HLNext(0.3)<cr>

" EITHER blink the line containing the match...
function! HLNext (blinktime)
    set invcursorline
    redraw
    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
    set invcursorline
    redraw
endfunction

nnoremap  ;  :
"nnoremap  :  ;

" i still don't know what q: is supposed to do, but lets not do it
map q: :q

"Commenting blocks of code.
if has("autocmd")
    let b:comment_leader = ''
    autocmd FileType c,cpp,java,php,scala let b:comment_leader = '// '
    autocmd FileType sh,ruby,python let b:comment_leader = '# '
    autocmd FileType conf,fstab let b:comment_leader = '# '
    autocmd FileType tex let b:comment_leader = '% '
    autocmd FileType mail let b:comment_leader = '> '
    autocmd FileType vim let b:comment_leader = '" '

    noremap <silent> <Leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
    noremap <silent> <Leader>cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>
endif
